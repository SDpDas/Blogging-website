/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/translatorMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Translator. */
var Translator = /** @class */ (function () {
    /**
     * Create a Translator.
     * @param {TranslatorTextClientContext} client Reference to the service client.
     */
    function Translator(client) {
        this.client = client;
    }
    Translator.prototype.breakSentence = function (text, options, callback) {
        return this.client.sendOperationRequest({
            text: text,
            options: options
        }, breakSentenceOperationSpec, callback);
    };
    Translator.prototype.detect = function (text, options, callback) {
        return this.client.sendOperationRequest({
            text: text,
            options: options
        }, detectOperationSpec, callback);
    };
    Translator.prototype.dictionaryLookup = function (from, to, text, options, callback) {
        return this.client.sendOperationRequest({
            from: from,
            to: to,
            text: text,
            options: options
        }, dictionaryLookupOperationSpec, callback);
    };
    Translator.prototype.dictionaryExamples = function (from, to, text, options, callback) {
        return this.client.sendOperationRequest({
            from: from,
            to: to,
            text: text,
            options: options
        }, dictionaryExamplesOperationSpec, callback);
    };
    Translator.prototype.languages = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, languagesOperationSpec, callback);
    };
    Translator.prototype.translate = function (to, text, options, callback) {
        return this.client.sendOperationRequest({
            to: to,
            text: text,
            options: options
        }, translateOperationSpec, callback);
    };
    Translator.prototype.transliterate = function (language, fromScript, toScript, texts, options, callback) {
        return this.client.sendOperationRequest({
            language: language,
            fromScript: fromScript,
            toScript: toScript,
            texts: texts,
            options: options
        }, transliterateOperationSpec, callback);
    };
    return Translator;
}());
export { Translator };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var breakSentenceOperationSpec = {
    httpMethod: "POST",
    path: "BreakSentence",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.language0,
        Parameters.script
    ],
    headerParameters: [
        Parameters.xClientTraceId
    ],
    requestBody: {
        parameterPath: "text",
        mapper: {
            required: true,
            serializedName: "text",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "BreakSentenceTextInput"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BreakSentenceResultItem"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorMessage
        }
    },
    serializer: serializer
};
var detectOperationSpec = {
    httpMethod: "POST",
    path: "Detect",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.xClientTraceId
    ],
    requestBody: {
        parameterPath: "text",
        mapper: {
            required: true,
            serializedName: "text",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "DetectTextInput"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DetectResultItem"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorMessage
        }
    },
    serializer: serializer
};
var dictionaryLookupOperationSpec = {
    httpMethod: "POST",
    path: "Dictionary/Lookup",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.from0,
        Parameters.to0
    ],
    headerParameters: [
        Parameters.xClientTraceId
    ],
    requestBody: {
        parameterPath: "text",
        mapper: {
            required: true,
            serializedName: "text",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "DictionaryLookupTextInput"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DictionaryLookupResultItem"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorMessage
        }
    },
    serializer: serializer
};
var dictionaryExamplesOperationSpec = {
    httpMethod: "POST",
    path: "Dictionary/Examples",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.from0,
        Parameters.to0
    ],
    headerParameters: [
        Parameters.xClientTraceId
    ],
    requestBody: {
        parameterPath: "text",
        mapper: {
            required: true,
            serializedName: "text",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "DictionaryExampleTextInput"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DictionaryExampleResultItem"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorMessage
        }
    },
    serializer: serializer
};
var languagesOperationSpec = {
    httpMethod: "GET",
    path: "Languages",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.scope
    ],
    headerParameters: [
        Parameters.acceptLanguage,
        Parameters.xClientTraceId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LanguagesResult
        },
        default: {
            bodyMapper: Mappers.ErrorMessage
        }
    },
    serializer: serializer
};
var translateOperationSpec = {
    httpMethod: "POST",
    path: "translate",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.from1,
        Parameters.to1,
        Parameters.textType,
        Parameters.category,
        Parameters.profanityAction,
        Parameters.profanityMarker,
        Parameters.includeAlignment,
        Parameters.includeSentenceLength,
        Parameters.suggestedFrom,
        Parameters.fromScript0,
        Parameters.toScript0
    ],
    headerParameters: [
        Parameters.xClientTraceId
    ],
    requestBody: {
        parameterPath: "text",
        mapper: {
            required: true,
            serializedName: "text",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "TranslateTextInput"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TranslateResultAllItem"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorMessage
        }
    },
    serializer: serializer
};
var transliterateOperationSpec = {
    httpMethod: "POST",
    path: "transliterate",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.language1,
        Parameters.fromScript1,
        Parameters.toScript1
    ],
    headerParameters: [
        Parameters.xClientTraceId
    ],
    requestBody: {
        parameterPath: "texts",
        mapper: {
            required: true,
            serializedName: "texts",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "TransliterateTextInput"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TransliterateResultItem"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorMessage
        }
    },
    serializer: serializer
};
//# sourceMappingURL=translator.js.map